---
import { CollectionEntry, getCollection } from "astro:content";
import ProjectDetails from "@layouts/ProjectDetails.astro";
import Projects from "@layouts/Projects.astro";
import getSortedProjects from "@utils/getSortedProjects";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
export interface Props {
  project: CollectionEntry<"projects">;
}
export async function getStaticPaths() {
  const projects = await getCollection("projects", ({ data }) => !data.draft);
  const postResult = projects.map(project => ({
    params: { slug: slugify(project.data) },
    props: { project },
  }));
  const pagePaths = getPageNumbers(projects.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));
  return [...postResult, ...pagePaths];
}
const { slug } = Astro.params;
const { project } = Astro.props;
const projects = await getCollection("projects");
const sortedProjects = getSortedProjects(projects)
const totalPages = getPageNumbers(sortedProjects.length);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastProject = currentPage * SITE.postPerPage;
const startProject = lastProject - SITE.postPerPage;
const paginatedProjects = sortedProjects.slice(startProject, lastProject);
---

{
  project ? (
    <ProjectDetails project={project} />
  ) : (
    <Projects
      projects={paginatedProjects}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}